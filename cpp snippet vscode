{
    "boilerplate": {
        "prefix": "comding",
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "typedef long long ll;",
            "#define pb push_back",
            "#define fastio() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)",
            "",
            "int main() {",
            "\tfastio();",
            "\t$1",
            "\treturn 0;",
            "}"
        ],
        "description": "Competitive Programming C++ Boilerplate"
    }
}



/*
// without bits file
{
    "boilerplate": {
        "prefix": "comding",
        "body": [
            "//#include <bits/stdc++.h>",
            "#include <iostream>",
            "#include <vector>",
            "#include <string>",
            "#include <algorithm>",
            "#include <cmath>",
            "#include <cstdio>",
            "#include <cstdlib>",
            "#include <cstring>",
            "#include <climits>",
            "#include <iomanip>",
            "#include <set>",
            "#include <map>",
            "#include <queue>",
            "#include <stack>",
            "#include <deque>",
            "#include <list>",
            "#include <unordered_set>",
            "#include <unordered_map>",
            "#include <bitset>",
            "#include <functional>",
            "#include <numeric>",
            "#include <utility>",
            "#include <ctime>",
            "#include <cassert>",
            "#include <complex>",
            "#include <chrono>",
            "#include <random>",
            "#include <array>",
            "#include <cfloat>",
            "using namespace std;",
            "typedef long long ll;",
            "#define pb push_back",
            "#define fastio() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)",
            "",
            "int main() {",
            "\tfastio();",
            "\t$1",
            "\treturn 0;",
            "}"
        ],
        "description": "Competitive Programming C++ Boilerplate"
    }
}

*/
